/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eAdmob_autodefs.h"
#include "s3eEdk.h"
#include "s3eAdmob.h"
//Declarations of Init and Term functions
extern s3eResult s3eAdmobInit();
extern void s3eAdmobTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static s3eResult s3eAdmobStart_wrap(const char* pub_id, int ad_type, int orientation, int x, int y)
{
    IwTrace(ADMOB_VERBOSE, ("calling s3eAdmob func on main thread: s3eAdmobStart"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAdmobStart, 5, pub_id, ad_type, orientation, x, y);
}

static s3eResult s3eAdmobResize_wrap(int ad_type)
{
    IwTrace(ADMOB_VERBOSE, ("calling s3eAdmob func on main thread: s3eAdmobResize"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAdmobResize, 1, ad_type);
}

static s3eResult s3eAdmobShow_wrap()
{
    IwTrace(ADMOB_VERBOSE, ("calling s3eAdmob func on main thread: s3eAdmobShow"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAdmobShow, 0);
}

static s3eResult s3eAdmobRefresh_wrap()
{
    IwTrace(ADMOB_VERBOSE, ("calling s3eAdmob func on main thread: s3eAdmobRefresh"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAdmobRefresh, 0);
}

static s3eResult s3eAdmobHide_wrap()
{
    IwTrace(ADMOB_VERBOSE, ("calling s3eAdmob func on main thread: s3eAdmobHide"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAdmobHide, 0);
}

static s3eResult s3eAdmobMove_wrap(int orientation, int x, int y)
{
    IwTrace(ADMOB_VERBOSE, ("calling s3eAdmob func on main thread: s3eAdmobMove"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAdmobMove, 3, orientation, x, y);
}

static s3eResult s3eAdmobShowInterstitial_wrap(const char* med_id)
{
    IwTrace(ADMOB_VERBOSE, ("calling s3eAdmob func on main thread: s3eAdmobShowInterstitial"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAdmobShowInterstitial, 1, med_id);
}

static s3eResult s3eAdmobShowSplash_wrap(const char* med_id)
{
    IwTrace(ADMOB_VERBOSE, ("calling s3eAdmob func on main thread: s3eAdmobShowSplash"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAdmobShowSplash, 1, med_id);
}

#define s3eAdmobStart s3eAdmobStart_wrap
#define s3eAdmobResize s3eAdmobResize_wrap
#define s3eAdmobShow s3eAdmobShow_wrap
#define s3eAdmobRefresh s3eAdmobRefresh_wrap
#define s3eAdmobHide s3eAdmobHide_wrap
#define s3eAdmobMove s3eAdmobMove_wrap
#define s3eAdmobShowInterstitial s3eAdmobShowInterstitial_wrap
#define s3eAdmobShowSplash s3eAdmobShowSplash_wrap

#endif

s3eResult s3eAdmobRegister(s3eAdmobCallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_ADMOB_HASH, S3E_ADMOB_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult s3eAdmobUnRegister(s3eAdmobCallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_ADMOB_HASH, S3E_ADMOB_CALLBACK_MAX, cbid, fn);
}

void s3eAdmobRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[10];
    funcPtrs[0] = (void*)s3eAdmobRegister;
    funcPtrs[1] = (void*)s3eAdmobUnRegister;
    funcPtrs[2] = (void*)s3eAdmobStart;
    funcPtrs[3] = (void*)s3eAdmobResize;
    funcPtrs[4] = (void*)s3eAdmobShow;
    funcPtrs[5] = (void*)s3eAdmobRefresh;
    funcPtrs[6] = (void*)s3eAdmobHide;
    funcPtrs[7] = (void*)s3eAdmobMove;
    funcPtrs[8] = (void*)s3eAdmobShowInterstitial;
    funcPtrs[9] = (void*)s3eAdmobShowSplash;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[10] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("s3eAdmob", funcPtrs, sizeof(funcPtrs), flags, s3eAdmobInit, s3eAdmobTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eAdmobStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eAdmobRegisterExt;
    return 0;
}

int g_s3eAdmobVal = s3eAdmobStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eAdmobRegisterExt();
}
#endif

#endif
